[
    {
        "title": "Build An Android App To Monitor and Convert “bitcoin and etherum” in 20 Local Currencies",
        "description": "Build An Android App To Monitor and Convert “bitcoin and etherum” in 20 Local Currencies\nEkene Eze\n·\nFollow\nPublished in\nQuick Code\n·\n9 min read\n·\nJan 30, 2018\n--\nListen\nShare\nIn the era of the digital world, the monetary system is constantly changing, and things that has been popular are recently being replaced by improved technologies.\nThe payment industry is particularly affected by this digital era of cryptocurrencies given the public acceptance it has received by many countries and payment platforms. Countries like Japan has already made it a legal means of payment alongside many others.\nA friend once wrote “ Our ecosystem is no longer just about the code but about people who build and use products.\nRecently, I’ve realized that 50% of my time (including weekends) is distributed to VS code, the terminal, and Slack. This whole thing is becoming a lifestyle and of course, I’m embracing it — it’s what I love”.\nI believe he’s not alone. A lot of us spend up to 50hrs a week on productivity tools. Why should we limit it to just code? Why not extend it to cover daily life utility tasks for us.\nWith that in mind, I’ve put up a developer tool to show the possibilities of monitoring these cryptocurrencies in realtime on your android devices. Not just that, you will be able to convert them across 20 different local currencies.\nSo in this tutorial, we’ll walk through how you can build this application for yourself leveraging on the api we’ll be providing for this purpose.\nDEMO\nIt’s always good practice to have a visual and practical idea of what you’re building and how it works, so you can take a look at this \nshort clip\n to see how this app works, you can also access the\n source code\n on github. Without further ado, let’s head on over to Android Studio and start building..\nSide Knowledge\nBy virtue of this article, you will learn a few other Android Development skills like:\nMaking API calls\nProcessing nested Json objects with iterators\nMaking network requests with volley\nWorking with recyclerviews and cardviews\nMathematical conversions with formats\netc\nTechnologies\nBefore we go ahead and start building, it is wise to talk about the technologies we’ll be using so it won’t look confusing when you come across them as we progress.\nVolley\n — a third party library that allows us make network requests seamlessly\nRecyclerview/CardView\n — Android special layouts for better organizing contents on screen\nNow create a new Android Studio project called “CryptoCompare”by now this should be a fairly basic step however if you’re just starting off, refer to any of my \nprevious posts\n on how to set up a new AS project.\nOnce you’re done creating a new project, install the dependencies for the technologies we talked about. Open your app level \nbuild.gradle\n file and add:\nclick sync to install dependencies\nMainActivity Layout\nThen open \nActivity_main.xml\n and set up the layout like so:\nThis is quite a simple layout with a toolbar and three TextView objects for local currency, BTC and ETH respectively, this is primarily just serving as headers for the values to be loaded remotely into the recyclerview we defined below the TextView objects. This layout should look like this in your xml visualizer:\nHey, yours might not look exactly like this but then it shouldn’t, because i used a custom background image which you probably don’t have. The important thing to look out for is the three TextView objects showing up as expected and the blue lines denoting the area covered by your recyclerview and probably the toolbar.\nWhen we make an api call that will return the values of these TextView objects, we’ll simply pass the data into our CardView layout and then use the layout to populate the recyclerview accordingly, make sense ? okay lets continue.\nCardView Layout\nTalking about CardView, let’s create a new layout resource file called “card_items.xml”. This will be the CardView layout where we will define the contents we’d like to display on the recyclerview i.e Currency, BTC and ETH. So create the new resource file and set it up like so:\nThis is a simple CardView layout with three TextView objects that we predefined with dummy values to serve as place holders for the actual data we’ll be getting from our api. Just for the sake of clarity, your xml visualizer for this layout should look like this:\nNow let’s head over to our\nMainActivity.java\n file and get interactive. Open \nMainActivity.java\n and initialize the recyclerview object. Then we start making the api call. First we store the api inside a variable we defined as “private static final String \nURL_DATA” \nand then use it to build our JSONObject request like so:\nWhat we have done in the \nonCreate()\n method here is quite simple, we defined our api in a string variable, initialized our toolbar, texts and recyclerview. We also created an \nArrayList\n from a \nCardItems\n class that we are yet to create but will do so soon. Notice we also called a method \nloadURLData().\n This is the method where we make the request to the api to return the values of the bitcoin, etherum and their respective values in 20 currencies. If you copied this snippet into your studio and got errors then don’t fret, you’re not lost, actually we called a method and even two classes we are yet to create:\nloadURLData()\nMyAdapter\n class\nCardItems\n class.\nSo go back inside the MainActivity class and create the \nloadURLData()\n method and set it up like so:\nloadURData()\nHere we are simply making an api call with volley passing in the variable that stores the Api. The method returns a \nresponse\n from where we then extract our btc and eth values into a JSONObject. Then we use the \niterator<?>\n to iterate through the nested object and match the individual \nbtc\n and \neth\n values to their respective currencies \nkeysBTC\n and \nkeysETH\n. Next we create the \nMyAdapter\n class. So create a new java class called MyAdapter and set it up like so:\nMyAdapeter class\nThe MyAdapter class is associated with our recyclerview view object. We use it to organize the contents of the recyclerview. In this context, we simply inflated the \ncard_items.xml\n layout and then used the implemented methods to create viewHolders and bind it’s contents to the inflated layout.\nOkay let’s step through this for a bit, by the way if you see any red lines at this point, don’t worry you are not alone, i’ll explain why you got the red lines and how to overcome it. From the top, when we created the \nMyAdapter\n class, we extended \nRcyclerView.Adapter<MyAdapter.ViewHolder>\n and passed into it the the cardItemsList and the Context, which prompted us to implement it’s associating methods (\nviewHolder()\n and \nonBindViewHolder()\n). Inside the \nviewHolder()\n method we simply inflated the \ncard_items.xml\n layout file and returned a new \nviewHolder(v)\n method.\nThen in the \nonBindViewHolder()\n method, we created an instance of the CardItems class and then stored the values of the cardItem objects into it’s respective variables (curr, btcVal and ethVal). Then to finally bind these variables to their respective positions on the viewHolder, we \nset\n them on the viewHolder \nholder\n with the help of our CardItems instance where we defined the setters and getters.\nFinally, notice that when we extended the MyAdapter class, we passed in \n<MyAdapter.ViewHolder>\n hence, we created the \nViewHolder\n class inside the MyAdapter class where we simply initialized all the view objects in the card_item.xml file, including the LinearLayout.\nCardItems class\nFinally, to finish setting up our MainActivity, we create the CardItems class. The CardItems class will simply help us generate \nsetters\n and \ngetters\n for the contents of our \ncard_items.xml\n file which we have earlier initialized in the \nonCreat()\n method of the MainActivity class . So create a new java class called \nCardItems\n and set it up like so:\nAt this point everything is correctly set up. If you run the app, you should now see that the contents we passed from the JSON response into our card_items layout file will show up on the layout which in turn gets laid out on the recyclerview like so:\nAt this point we can see all 20 currencies listed out with their respective Bitcoin and Etherum values, given that we implemented a ScrollView, you can simply scroll up and see more of the contents. However we are not done.\nFind out Free courses on \nQuick Code\n for various programming languages. Get new updates on \nMessenger\n.\nConversion\nIt is evident that the values we see are listed out in the base currency. So what if i wanted to know the value of not just 1 BTC in Naira but could actually convert any Naira value to get it’s BTC or ETH equivalent and vise versa ? that would be something i figured you might wanna do or at least if not do, have have knowledge of. So it’s not really a big deal am sure you can already imagine how we are going to achieve that. Anyways, let’s go ahead and start the conversion, first off, create a new Activity called \nConvertActivity.\n This is where we’ll carry out the conversion proper. Every new Activity comes with a layout resource file in this case \nactivity_convert.xml\n and a java file \nConvertActivity.java.\n Open the \nactivity_convert.xml\n and set up the layout to look like this:\nIf you can’t achieve this layout on your own, feel free to get my code for this particular layout file on this \ngithub gist\n. However, you can also find it on the project \nsource code\n at any time. Because of article length i’ve decided not to attach that particular snippet given it’s length.\nSo if you succeeded in building your conversion layout to look like mine, next we need to create an interface where we’ll define some constants that will be relevant for our conversion. Create a new interface called \nConstants.\n This is not something new, the same way you create java classes, just that this time you change the ‘kind’ value to interface instead of class.\nOnce you’ve created the Constants interface, open it and set it up like so:\nUp next, open the \nMyAdapter\n class and update it such that upon clicking any card on the view holder, it opens the \nConvertActivity\n with the details of that particular card. In essence, create an intent and put all the extras you’ll need to do the conversion. So open the file and update the \nonBindViewHolder()\n method by adding this code:\nFinally we open the \nConvertActivity.java\n file and initialize all the necessary view objects and finally set up the conversion logic like so:\nThis might get a bit confusing for you if you didn’t build your conversion layout as i did mine because of the view objects and their id’s. If you have any errors at this point, be sure to check the id’s you assigned to the view objects in your \nactivity_convert.xml\n or simply copy it from the source code.\nNext we created a method \ngetFullName()\n to get the full currency name and pass into the \nfullNameView\n textview inside the layout file.\nFinally to do the actual conversion and display values, we create another method called \ndoCOnvert().\n this method will be called by a view such that when a particular view is clicked, it’ll execute the conversion with the provided input value and display the result in the respective \nflatValueEdit\n object.\nNow at this point, the conversion activity is all set up and ready to roll. If you run the app again it should all be set up and working exactly as expected.\nConclusion\nWell you have just created yourself an amazing developer tool. Now you can track the value of bitcoin and etherum in realtime across 20 different currencies. That’s not all, you can even convert values across all currency and get the desired results in realtime, now that’s a good tool to have handy especially in this crypto era. The best part is not that you have that app, it’s that you built it, so congrats !! keep learning\nPlease click 👏 button below a few times to show your support! ⬇⬇ Thanks! Don’t forget to follow Quick Code below.",
        "thumbnail_url": "https://miro.medium.com/v2/resize:fit:1200/1*tLq_b4-MGkNOISl-T9etQQ.jpeg",
        "member_only": false,
        "author": "Ekene Eze",
        "tags": []
    }
]